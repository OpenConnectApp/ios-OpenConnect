//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: private_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `PrivateDataService_PrivateDataServiceClient`, then call methods of this protocol to make API calls.
public protocol PrivateDataService_PrivateDataServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: PrivateDataService_PrivateDataServiceClientInterceptorFactoryProtocol? { get }

  func connectExchange(
    _ request: PrivateDataService_ConnectExchangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PrivateDataService_ConnectExchangeRequest, PrivateDataService_ConnectExchangeResponse>

  func disconnectExchange(
    _ request: PrivateDataService_DisconnectExchangeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PrivateDataService_DisconnectExchangeRequest, PrivateDataService_DisconnectExchangeResponse>

  func getExchangeStatus(
    _ request: PrivateDataService_GetExchangeStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PrivateDataService_GetExchangeStatusRequest, PrivateDataService_GetExchangeStatusResponse>

  func listConnectedExchanges(
    _ request: PrivateDataService_ListConnectedExchangesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PrivateDataService_ListConnectedExchangesRequest, PrivateDataService_ListConnectedExchangesResponse>

  func getTransactions(
    _ request: PrivateDataService_GetTransactionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<PrivateDataService_GetTransactionsRequest, PrivateDataService_GetTransactionsResponse>
}

extension PrivateDataService_PrivateDataServiceClientProtocol {
  public var serviceName: String {
    return "private_data_service.PrivateDataService"
  }

  /// Unary call to ConnectExchange
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectExchange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectExchange(
    _ request: PrivateDataService_ConnectExchangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PrivateDataService_ConnectExchangeRequest, PrivateDataService_ConnectExchangeResponse> {
    return self.makeUnaryCall(
      path: "/private_data_service.PrivateDataService/ConnectExchange",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectExchangeInterceptors() ?? []
    )
  }

  /// Unary call to DisconnectExchange
  ///
  /// - Parameters:
  ///   - request: Request to send to DisconnectExchange.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func disconnectExchange(
    _ request: PrivateDataService_DisconnectExchangeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PrivateDataService_DisconnectExchangeRequest, PrivateDataService_DisconnectExchangeResponse> {
    return self.makeUnaryCall(
      path: "/private_data_service.PrivateDataService/DisconnectExchange",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisconnectExchangeInterceptors() ?? []
    )
  }

  /// Unary call to GetExchangeStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to GetExchangeStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getExchangeStatus(
    _ request: PrivateDataService_GetExchangeStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PrivateDataService_GetExchangeStatusRequest, PrivateDataService_GetExchangeStatusResponse> {
    return self.makeUnaryCall(
      path: "/private_data_service.PrivateDataService/GetExchangeStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetExchangeStatusInterceptors() ?? []
    )
  }

  /// Unary call to ListConnectedExchanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListConnectedExchanges.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listConnectedExchanges(
    _ request: PrivateDataService_ListConnectedExchangesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PrivateDataService_ListConnectedExchangesRequest, PrivateDataService_ListConnectedExchangesResponse> {
    return self.makeUnaryCall(
      path: "/private_data_service.PrivateDataService/ListConnectedExchanges",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListConnectedExchangesInterceptors() ?? []
    )
  }

  /// Unary call to GetTransactions
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTransactions(
    _ request: PrivateDataService_GetTransactionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<PrivateDataService_GetTransactionsRequest, PrivateDataService_GetTransactionsResponse> {
    return self.makeUnaryCall(
      path: "/private_data_service.PrivateDataService/GetTransactions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetTransactionsInterceptors() ?? []
    )
  }
}

public protocol PrivateDataService_PrivateDataServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'connectExchange'.
  func makeConnectExchangeInterceptors() -> [ClientInterceptor<PrivateDataService_ConnectExchangeRequest, PrivateDataService_ConnectExchangeResponse>]

  /// - Returns: Interceptors to use when invoking 'disconnectExchange'.
  func makeDisconnectExchangeInterceptors() -> [ClientInterceptor<PrivateDataService_DisconnectExchangeRequest, PrivateDataService_DisconnectExchangeResponse>]

  /// - Returns: Interceptors to use when invoking 'getExchangeStatus'.
  func makeGetExchangeStatusInterceptors() -> [ClientInterceptor<PrivateDataService_GetExchangeStatusRequest, PrivateDataService_GetExchangeStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'listConnectedExchanges'.
  func makeListConnectedExchangesInterceptors() -> [ClientInterceptor<PrivateDataService_ListConnectedExchangesRequest, PrivateDataService_ListConnectedExchangesResponse>]

  /// - Returns: Interceptors to use when invoking 'getTransactions'.
  func makeGetTransactionsInterceptors() -> [ClientInterceptor<PrivateDataService_GetTransactionsRequest, PrivateDataService_GetTransactionsResponse>]
}

public final class PrivateDataService_PrivateDataServiceClient: PrivateDataService_PrivateDataServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: PrivateDataService_PrivateDataServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the private_data_service.PrivateDataService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: PrivateDataService_PrivateDataServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

