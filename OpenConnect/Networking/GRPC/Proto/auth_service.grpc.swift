//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: auth_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Auth_AuthServiceClient`, then call methods of this protocol to make API calls.
public protocol Auth_AuthServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? { get }

  func login(
    _ request: Auth_LoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_LoginRequest, Auth_LoginResponse>

  func register(
    _ request: Auth_RegisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_RegisterRequest, Auth_RegisterResponse>

  func verifyAccount(
    _ request: Auth_VerifyAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Auth_VerifyAccountRequest, Auth_VerifyAccountResponse>
}

extension Auth_AuthServiceClientProtocol {
  public var serviceName: String {
    return "auth.AuthService"
  }

  /// Unary call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func login(
    _ request: Auth_LoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_LoginRequest, Auth_LoginResponse> {
    return self.makeUnaryCall(
      path: "/auth.AuthService/Login",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func register(
    _ request: Auth_RegisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_RegisterRequest, Auth_RegisterResponse> {
    return self.makeUnaryCall(
      path: "/auth.AuthService/Register",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  /// Unary call to VerifyAccount
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyAccount(
    _ request: Auth_VerifyAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Auth_VerifyAccountRequest, Auth_VerifyAccountResponse> {
    return self.makeUnaryCall(
      path: "/auth.AuthService/VerifyAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVerifyAccountInterceptors() ?? []
    )
  }
}

public protocol Auth_AuthServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<Auth_LoginRequest, Auth_LoginResponse>]

  /// - Returns: Interceptors to use when invoking 'register'.
  func makeRegisterInterceptors() -> [ClientInterceptor<Auth_RegisterRequest, Auth_RegisterResponse>]

  /// - Returns: Interceptors to use when invoking 'verifyAccount'.
  func makeVerifyAccountInterceptors() -> [ClientInterceptor<Auth_VerifyAccountRequest, Auth_VerifyAccountResponse>]
}

public final class Auth_AuthServiceClient: Auth_AuthServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the auth.AuthService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Auth_AuthServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

